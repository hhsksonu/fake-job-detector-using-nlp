# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kHwJ5tYCzgxfDs3NzcevLjozxPXzffZh
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import joblib
# import numpy as np
# import shap
# import matplotlib.pyplot as plt
# 
# # Load model and vectorizer
# model = joblib.load("xgb_fake_job_model.pkl")
# vectorizer = joblib.load("tfidf_vectorizer.pkl")
# 
# # Initialize SHAP
# shap.initjs()
# explainer = shap.Explainer(model)
# 
# # Streamlit UI
# st.title("Fake Job Post Detector")
# st.write("Paste a job posting text below to find out if it is potentially fake.")
# 
# user_input = st.text_area("Enter Job Posting Text:", height=300)
# 
# if st.button("Predict"):
#     if user_input.strip() == "":
#         st.warning("Please enter some text to analyze.")
#     else:
#         # Vectorize input
#         input_vector = vectorizer.transform([user_input])
# 
#         # Make prediction
#         prediction = model.predict(input_vector)[0]
#         proba = model.predict_proba(input_vector)[0]
# 
#         # Show prediction result
#         if prediction == 1:
#             st.error(f"This job post is likely **FAKE** (Confidence: {proba[1]*100:.2f}%)")
#         else:
#             st.success(f"This job post is likely **REAL** (Confidence: {proba[0]*100:.2f}%)")
# 
#         # SHAP Explanation
#         st.write("### üîç SHAP Explanation")
#         try:
#             # SHAP expects dense input for some models
#             input_dense = input_vector.toarray()
#             shap_values = explainer(input_dense)
# 
#             # ‚úÖ Add actual feature names to SHAP values
#             feature_names = vectorizer.get_feature_names_out().tolist()
#             shap_values.feature_names = feature_names
# 
#             # Waterfall plot for a single sample
#             fig, ax = plt.subplots(figsize=(10, 5))
#             shap.plots.waterfall(shap_values[0], show=False, max_display=15)
#             st.pyplot(fig)
# 
#         except Exception as e:
#             st.warning("SHAP explanation failed. Reason: " + str(e))

!ngrok config add-authtoken 30XvutH43OqZ8Y05cURVFMqwjzc_7Xs9x4bEpQtdSsD5N4Yom

from pyngrok import ngrok
import time
import threading

# Function to run Streamlit app
def run_streamlit():
    !streamlit run app.py

# Start Streamlit in a separate thread
thread = threading.Thread(target=run_streamlit)
thread.start()

# Wait a bit for Streamlit to start
time.sleep(5)

# Open a tunnel on port 8501
public_url = ngrok.connect(8501)
print("Your app is live at:", public_url)

"""Run Streamlit via ngrok:"""